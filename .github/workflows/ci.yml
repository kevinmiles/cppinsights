name: ci
on: [push, pull_request]

jobs:
  # checks:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 2

  #   - name: Install Clang 10
  #     shell: bash
  #     working-directory: ${{ env.HOME }}
  #     run: |
  #       wget https://apt.llvm.org/llvm.sh
  #       chmod +x llvm.sh
  #       sudo ./llvm.sh 10
  #       sudo apt-get install clang-format-10

  #   - name: Check clang-format
  #     id: checkcondition
  #     run: |
  #          ./scripts/travis-clang-format-check.sh clang-format-10

  # build:
  #   needs: checks
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        # AppleClang
        - {
            name: "macOS Clang",
            os: macos-latest,
            build_type: Release,
            cxx: "clang++",
            llvm_version: "10.0.0",
            llvm_config: "llvm-config",
            coverage: "No",
            static: "No",
            debug: "No",
            tidy: "No",
            shacmd: "shasum -a 256",
          }
        # AppleClang
        - {
            name: "macOS Clang (Debug)",
            os: macos-latest,
            build_type: Release,
            cxx: "clang++",
            llvm_version: "10.0.0",
            llvm_config: "llvm-config",
            coverage: "No",
            static: "No",
            debug: "Yes",
            tidy: "No",
            shacmd: "shasum -a 256",
          }
          
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
        path: cppinsights

    - name: Download Ninja and CMake
      id: cmake_and_ninja
      #      working-directory: ${{ env.HOME }}
      shell: cmake -P {0}
      run: |
        set(cmake_version $ENV{CMAKE_VERSION})
        set(ninja_version $ENV{NINJA_VERSION})

        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ninja_suffix "win.zip")
          set(cmake_suffix "win64-x64.zip")
          set(cmake_dir "cmake-${cmake_version}-win64-x64/bin")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(ninja_suffix "linux.zip")
          set(cmake_suffix "Linux-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-Linux-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(ninja_suffix "mac.zip")
          set(cmake_suffix "Darwin-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-Darwin-x86_64/CMake.app/Contents/bin")
        endif()

        set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
        file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf ./ninja.zip)

        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf ./cmake.zip)
        
        # preserve it for the next steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
        message("::set-env name=cmake_dir::${cmake_dir}")

        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          execute_process(
            COMMAND chmod +x ninja
            COMMAND chmod +x ${cmake_dir}/cmake
          )
        endif()

    - name: Config2
      if: startsWith(matrix.config.os, 'macos')
      shell: bash
      #      working-directory: ${{ env.HOME }}
      run: |
          echo "${GITHUB_WORKSPACE}"
          echo "$cmake_dir/cmake"
          ls -l ${GITHUB_WORKSPACE}
        
    - name: Install Clang 10 (mac)
      id: install_clang_10
      if: startsWith(matrix.config.os, 'macos')
      shell: bash
      #      working-directory: ${{ env.HOME }}
      run: |
        export LLVM_VERSION=${{ matrix.config.llvm_version }}
        wget -q --continue https://github.com/andreasfertig/cppinsights-compiler-binaries/releases/download/${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-apple-darwin.tar.xz
        mkdir -p current
        tar -xJf clang+llvm-${LLVM_VERSION}-x86_64-apple-darwin.tar.xz -C current --strip-components 1
        rm -f clang+llvm-${LLVM_VERSION}-x86_64-apple-darwin.tar.xz
        export PATH=~/clang/current/bin:$PATH
        # preserve it for the next steps
        echo "::set-env name=PATH::$PATH"
        ls -l

    - name: Configure
      id: cmake_configure
      #      working-directory: ${{ env.HOME }}
      shell: cmake -P {0}
      run: |
        set(ENV{CXX} ${{ matrix.config.cxx }})

        if ("${{ runner.os }}" STREQUAL "Windows")
          execute_process(
            COMMAND "${{ matrix.config.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )
          set(cxx_flags "/permissive- /EHsc")
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
              # preserve it for the next steps
              message("::set-env name=${CMAKE_MATCH_1}::$ENV{${CMAKE_MATCH_1}}")
            endif()
          endforeach()
        endif()

        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")
        # preserve it for the next steps
        message("::set-env name=PATH::$ENV{PATH}")

        if ("x${{ matrix.config.libcxx }}" STREQUAL "xtrue")
          set(cxx_flags "${cxx_flags} -stdlib=libc++ -Wno-unused-command-line-argument")
          set(link_flags "${link_flags} -lc++abi")
        endif()

    - name: Config2
      if: startsWith(matrix.config.os, 'macos')
      shell: bash
      #      working-directory: ${{ env.HOME }}
      run: |
          echo "$cmake_dir/cmake"
          ls -l "$cmake_dir/"
          ls -l "$cmake_dir/cmake"
          $cmake_dir/cmake
            -S cppinsights
            -B build
            -G Ninja
            -D INSIGHTS_LLVM_CONFIG=${{ matrix.config.llvm_config}}
            -D INSIGHTS_COVERAGE=${{ matrix.config.coverage }}
            -D INSIGHTS_STATIC=${{ matrix.config.static }}
            -D DEBUG=${{ matrix.config.debug }}
            -D INSIGHTS_TIDY=${{ matrix.config.tidy }}
            #-D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
            -D CMAKE_MAKE_PROGRAM:STRING=ninja
            -D "CMAKE_CXX_FLAGS:STRING=${cxx_flags}"
            -D "CMAKE_EXE_LINKER_FLAGS:STRING=${link_flags}"
            ${{ matrix.config.cmake_args }}

    - name: Build
      shell: cmake -P {0}
      continue-on-error: false
      run: |
        set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")

        execute_process(
          COMMAND $ENV{cmake_dir}/cmake --build build
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    
